// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using TradeMonkey.Data.Context.Configurations;
using TradeMonkey.Data.Entity;
#nullable disable

namespace TradeMonkey.Data.Context;

public partial class TmDBContext : DbContext
{
    public TmDBContext()
    {
    }

    public TmDBContext(DbContextOptions<TmDBContext> options)
        : base(options)
    {
    }

    public virtual DbSet<CorrelationDatum> CorrelationDatums { get; set; }

    public virtual DbSet<CryptoData> CryptoDatas { get; set; }

    public virtual DbSet<IndicatorDatum> IndicatorDatums { get; set; }

    public virtual DbSet<IndiciesDatum> IndiciesDatums { get; set; }

    public virtual DbSet<Kucoin24hourStats> Kucoin24hourStats { get; set; }

    public virtual DbSet<KucoinAccount> KucoinAccounts { get; set; }

    public virtual DbSet<KucoinAllTick> KucoinAllTicks { get; set; }

    public virtual DbSet<KucoinHistory> KucoinHistories { get; set; }

    public virtual DbSet<KucoinKline> KucoinKlines { get; set; }

    public virtual DbSet<KucoinTick> KucoinTicks { get; set; }

    public virtual DbSet<KucoinTokenMetricsSymbol> KucoinTokenMetricsSymbols { get; set; }

    public virtual DbSet<PricePredictionDatum> PricePredictionDatums { get; set; }

    public virtual DbSet<QuantmetricsT1Datums> QuantmetricsT1Datums { get; set; }

    public virtual DbSet<QuantmetricsT2Datums> QuantmetricsT2Datums { get; set; }

    public virtual DbSet<ResistanceSupportDatum> ResistanceSupportDatums { get; set; }

    public virtual DbSet<ScenarioAnalysisDatum> ScenarioAnalysisDatums { get; set; }

    public virtual DbSet<SentimentsDatum> SentimentsDatums { get; set; }

    public virtual DbSet<TokenMetricsPrice> TokenMetricsPrices { get; set; }

    public virtual DbSet<TokenMetricsResistanceSupport> TokenMetricsResistanceSupports { get; set; }

    public virtual DbSet<TokenMetricsToken> TokenMetricsTokens { get; set; }

    public virtual DbSet<TraderGradesDatum> TraderGradesDatums { get; set; }

    public virtual DbSet<TradingIndicatorDatum> TradingIndicatorDatums { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        => optionsBuilder.UseSqlServer("Server=HP\\MFSQL;Initial Catalog=TradeMonkey;Integrated Security=True;Encrypt=false;;TrustServerCertificate=true",
            x => x.UseDateOnlyTimeOnly());

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
            modelBuilder.ApplyConfiguration(new Configurations.CorrelationDatumConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.CryptoDataConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.IndicatorDatumConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.IndiciesDatumConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.Kucoin24hourStatsConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.KucoinAccountConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.KucoinAllTickConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.KucoinHistoryConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.KucoinKlineConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.KucoinTickConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.KucoinTokenMetricsSymbolConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.PricePredictionDatumConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.QuantmetricsT1DatumsConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.QuantmetricsT2DatumsConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ResistanceSupportDatumConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ScenarioAnalysisDatumConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.SentimentsDatumConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.TokenMetricsPriceConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.TokenMetricsResistanceSupportConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.TokenMetricsTokenConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.TraderGradesDatumConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.TradingIndicatorDatumConfiguration());

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}
